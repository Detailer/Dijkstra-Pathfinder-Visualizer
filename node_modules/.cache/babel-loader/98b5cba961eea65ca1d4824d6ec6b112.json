{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/detailer/Documents/dev/react/path-visual/src/PathfindingVisualizer/PathfindingVisualizer.jsx\";\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\nimport './PathfindingVisualizer.css';\nvar START_NODE_ROW = 10;\nvar START_NODE_COL = 15;\nvar FINISH_NODE_ROW = 10;\nvar FINISH_NODE_COL = 35;\nvar flag1 = false;\nvar flag2 = false;\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  } // Mouse Handling For Walls\n\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp(row, col) {\n    this.setState({\n      mouseIsPressed: false\n    });\n  } // Mouse Handling for Start Node\n\n\n  handleMouseDownStart(row, col) {\n    const newGrid = getNewGridWithNoStartNode(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n    flag1 = true;\n  }\n\n  handleMouseEnterStart(row, col) {\n    if (!this.state.mouseIsPressed) {\n      flag1 = false;\n      return;\n    }\n\n    const newGrid = getNewGridWithNoStartNode(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUpStart(row, col) {\n    const newGrid = getNewGridWithStartNode(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n    flag1 = false;\n    START_NODE_ROW = row;\n    START_NODE_COL = col;\n    this.setState({\n      mouseIsPressed: false\n    });\n  } // Mouse Handling for Finish Node\n\n\n  handleMouseDownFinish(row, col) {\n    const newGrid = getNewGridWithNoFinishNode(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n    flag2 = true;\n  }\n\n  handleMouseEnterFinish(row, col) {\n    if (!this.state.mouseIsPressed) {\n      flag2 = false;\n      return;\n    }\n\n    const newGrid = getNewGridWithNoFinishNode(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUpFinish(row, col) {\n    const newGrid = getNewGridWithFinishNode(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n    flag2 = false;\n    FINISH_NODE_ROW = row;\n    FINISH_NODE_COL = col;\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"button button2\",\n        onClick: () => this.visualizeDijkstra(),\n        children: \"Visualize Dijkstra's Algorithm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: grid.map((row, rowIdx) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: row.map((node, nodeIdx) => {\n              const {\n                row,\n                col,\n                isFinish,\n                isStart,\n                isWall\n              } = node;\n              return /*#__PURE__*/_jsxDEV(Node, {\n                col: col,\n                isFinish: isFinish,\n                isStart: isStart,\n                isWall: isWall,\n                mouseIsPressed: mouseIsPressed,\n                onMouseDown: isStart ? (row, col) => this.handleMouseDownStart(row, col) : isFinish ? (row, col) => this.handleMouseDownFinish(row, col) : (row, col) => this.handleMouseDown(row, col),\n                onMouseEnter: flag1 == true ? (row, col) => this.handleMouseEnterStart(row, col) : flag2 == true ? (row, col) => this.handleMouseEnterFinish(row, col) : (row, col) => this.handleMouseEnter(row, col),\n                onMouseUp: flag1 == true ? (row, col) => this.handleMouseUpStart(row, col) : flag2 == true ? (row, col) => this.handleMouseUpFinish(row, col) : (row, col) => this.handleMouseUp(row, col),\n                row: row\n              }, nodeIdx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 21\n              }, this);\n            })\n          }, rowIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithStartNode = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isStart: !node.isStart\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithNoStartNode = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isStart: false\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithFinishNode = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isFinish: !node.isFinish\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithNoFinishNode = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isFinish: false\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/home/detailer/Documents/dev/react/path-visual/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","dijkstra","getNodesInShortestPathOrder","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","flag1","flag2","PathfindingVisualizer","constructor","state","grid","mouseIsPressed","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","handleMouseDownStart","getNewGridWithNoStartNode","handleMouseEnterStart","handleMouseUpStart","getNewGridWithStartNode","handleMouseDownFinish","getNewGridWithNoFinishNode","handleMouseEnterFinish","handleMouseUpFinish","getNewGridWithFinishNode","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","visualizeDijkstra","startNode","finishNode","render","map","rowIdx","nodeIdx","isFinish","isStart","isWall","currentRow","push","createNode","distance","Infinity","isVisited","previousNode","slice","newNode"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\n\nimport './PathfindingVisualizer.css';\n\nvar START_NODE_ROW = 10;\nvar START_NODE_COL = 15;\nvar FINISH_NODE_ROW = 10;\nvar FINISH_NODE_COL = 35;\nvar flag1 = false;\nvar flag2 = false;\n\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({grid});\n  }\n\n  // Mouse Handling For Walls\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid, mouseIsPressed: true});\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  handleMouseUp(row, col) {\n    this.setState({mouseIsPressed: false});\n  }\n\n  // Mouse Handling for Start Node\n  handleMouseDownStart(row, col) {\n    const newGrid = getNewGridWithNoStartNode(this.state.grid, row, col);\n    this.setState({grid: newGrid, mouseIsPressed: true});\n    flag1 = true;\n  }\n\n  handleMouseEnterStart(row, col) {\n    if (!this.state.mouseIsPressed){\n      flag1 = false; \n      return;\n    }\n    const newGrid = getNewGridWithNoStartNode(this.state.grid, row, col);\n    this.setState({grid: newGrid});  \n  }\n\n  handleMouseUpStart(row, col) {\n    const newGrid = getNewGridWithStartNode(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n    flag1 = false;\n    START_NODE_ROW = row;\n    START_NODE_COL = col;\n    this.setState({mouseIsPressed: false});\n  }\n\n  // Mouse Handling for Finish Node\n  handleMouseDownFinish(row, col) {\n    const newGrid = getNewGridWithNoFinishNode(this.state.grid, row, col);\n    this.setState({grid: newGrid, mouseIsPressed: true});\n    flag2 = true;\n  }\n\n  handleMouseEnterFinish(row, col) {\n    if (!this.state.mouseIsPressed){\n      flag2 = false; \n      return;\n    }\n    const newGrid = getNewGridWithNoFinishNode(this.state.grid, row, col);\n    this.setState({grid: newGrid});  \n  }\n\n  handleMouseUpFinish(row, col) {\n    const newGrid = getNewGridWithFinishNode(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n    flag2= false;\n    FINISH_NODE_ROW = row;\n    FINISH_NODE_COL = col;\n    this.setState({mouseIsPressed: false});\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const {grid, mouseIsPressed} = this.state;\n\n    return (\n      <>\n        <button class=\"button button2\"onClick={() => this.visualizeDijkstra()}>\n          Visualize Dijkstra's Algorithm\n        </button>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={\n                        (isStart) ? \n                        (\n                          (row, col) => this.handleMouseDownStart(row, col)\n                        ) \n                        :\n                        (\n                          (isFinish) ? (row, col) => this.handleMouseDownFinish(row, col) :\n                          (row, col) => this.handleMouseDown(row, col)\n                        )\n                      }\n                      onMouseEnter={ \n                        (flag1 == true) ? \n                        (\n                          (row, col) => this.handleMouseEnterStart(row, col) \n                        ) \n                        : \n                        (\n                          (flag2 == true) ? (row, col) => this.handleMouseEnterFinish(row, col) :\n                          (row, col) => this.handleMouseEnter(row, col) \n                        )\n                        \n                      }\n                      onMouseUp={\n                        (flag1 == true) ? \n                        (\n                          (row, col) => this.handleMouseUpStart(row, col)\n                        ) \n                        :\n                        ( \n                          (flag2 == true) ?\n                          (row, col) => this.handleMouseUpFinish(row, col) : \n                          (row, col) => this.handleMouseUp(row, col)\n                        )\n                      } \n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithStartNode = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isStart: !node.isStart,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithNoStartNode = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isStart: false,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithFinishNode = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isFinish: !node.isFinish,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithNoFinishNode = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isFinish: false,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n"]},"metadata":{},"sourceType":"module"}